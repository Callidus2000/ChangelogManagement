parameters:
  pwsh: true
  artifactName: ''

steps:
- task: PowerShell@2
  displayName: Install-Module
  inputs:
    pwsh: ${{ parameters.pwsh }}
    targetType: inline
    script: Install-Module -Name $env:BUILDMODULES.split(",") -Force -SkipPublisherCheck -AllowClobber
- task: PowerShell@2
  displayName: Set Variables and Tags
  inputs:
    pwsh: ${{ parameters.pwsh }}
    targetType: inline
    script: |
      $ProjectName = Get-ProjectName
      Write-Host "##vso[task.setvariable variable=projectName]$ProjectName"
- task: PowerShell@2
  displayName: Invoke-Pester
  inputs:
    pwsh: ${{ parameters.pwsh }}
    targetType: inline
    script: |
      if (!(Test-Path "out\")) { New-Item -Path "out" -Type Directory | Out-Null }
      $CodeCoverageFiles = @()
      $PublicFiles = Get-ChildItem -Path "src\public"
      foreach ($File in $PublicFiles) {
        $CodeCoverageFiles += $File.FullName
      }
      if (Test-Path -Path "src\private") {
        $PrivateFiles = Get-ChildItem -Path "src\private"
        foreach ($File in $PrivateFiles) {
          $CodeCoverageFiles += $File.FullName
        }
      }
      Write-Host $CodeCoverageFiles

      Import-Module Pester
      $Configuration = [PesterConfiguration]::Default
      $Configuration.Run.Path = ".\test"
      $Configuration.Run.Exit = $true
      $Configuration.CodeCoverage.Enabled = $true
      $Configuration.CodeCoverage.Path = $CodeCoverageFiles
      $Configuration.CodeCoverage.OutputPath = "out\CoverageResults.xml"
      $Configuration.TestResult.Enabled = $true
      $Configuration.TestResult.OutputPath = "out\TestResults.xml"
      Invoke-Pester -Configuration $Configuration
- task: PublishTestResults@2
  displayName: Publish Test Results
  condition: always()
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/TestResults.xml'
    testRunTitle: TestResults-${{ parameters.artifactName }}
- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage Results
  condition: always()
  inputs:
    codeCoverageTool: JaCoCo
    summaryFileLocation: '**/CoverageResults.xml'
    failIfCoverageEmpty: true
- task: PowerShell@2
  displayName: File & Directory Cleanup
  inputs:
    pwsh: false
    targetType: inline
    script: |
      # Remove uploaded Pester results files
      Remove-Item -Path "out\TestResults.xml" -ErrorAction SilentlyContinue
      Remove-Item -Path "out\CoverageResults.xml" -ErrorAction SilentlyContinue
      # Remove old docs
      Remove-Item -Path "docs\*" -Recurse -ErrorAction SilentlyContinue
      # Remove old output files
      Remove-Item -Path "out\*" -Recurse -ErrorAction SilentlyContinue
- task: PublishPipelineArtifact@0
  displayName: Publish Artifacts
  inputs:
    artifactName: ${{ parameters.artifactName }}
    targetPath: $(Build.Repository.LocalPath)