parameters:
  name: ''
  vmImage: ''
  moduleInstallOptions: ''
  pwsh: true
  tempDir: ''

jobs:
- job: ${{ parameters.name }}
  pool: 
    vmImage: ${{ parameters.vmImage }}
  steps:
  - task: PowerShell@2
    displayName: Environment Details
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $PSVersionTable
        Write-Host "tempDir = ${{ parameters.tempDir }}"
        Write-Host "Build.Repository.Uri = $env:BUILD_REPOSITORY_URI"
        Write-Host "Build.QueuedBy = $env:BUILD_QUEUEDBY"
        Write-Host "Build.SourceVersionMessage = $env:BUILD_SOURCEVERSIONMESSAGE"
        Write-Host "Build.Repository.Name = $env:BUILD_REPOSITORY_NAME"
        Write-Host "Build.BuildNumber = $env:BUILD_BUILDNUMBER"
        Write-Host "Current Location = $(Get-Location)"
  - task: PowerShell@2
    displayName: Install-Module
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: Install-Module -Name $env:POWERSHELLMODULES.split(",") -Force -SkipPublisherCheck -AllowClobber ${{ parameters.moduleInstallOptions }}
  - task: PowerShell@2
    displayName: Set Variables and Tags
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $ProjectName = Get-ProjectName
        Write-Host "##vso[task.setvariable variable=projectName]$ProjectName"
        Write-Host "##vso[task.setvariable variable=psEdition]$PSEdition"
  - task: PowerShell@2
    displayName: Invoke-Pester
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        if (!(Test-Path "out\")) { New-Item -Path "out" -Type Directory | Out-Null }
        Invoke-Pester -Path ".\test" -OutputFormat NUnitXml -OutputFile "out\TestResults.xml" -CodeCoverage "src\$env:PROJECTNAME.psm1" -CodeCoverageOutputFile "out\CoverageResults.xml" -EnableExit
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: always()
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/TestResults.xml'
      testRunTitle: 'TestResults-$(Agent.OS)_$(psEdition)'
  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Results
    condition: always()
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '**/CoverageResults.xml'
      failIfCoverageEmpty: true
  - task: PowerShell@2
    displayName: File & Directory Cleanup
    inputs:
      pwsh: false
      targetType: inline
      script: |
        # Remove uploaded Pester results files
        Remove-Item -Path "out\TestResults.xml" -ErrorAction SilentlyContinue
        Remove-Item -Path "out\CoverageResults.xml" -ErrorAction SilentlyContinue
        # Remove old docs
        Remove-Item -Path "docs\*" -Recurse -ErrorAction SilentlyContinue
        # Remove old output files
        Remove-Item -Path "out\*" -Recurse -ErrorAction SilentlyContinue
  - task: PublishPipelineArtifact@0
    displayName: Publish Artifacts
    inputs:
      artifactName: 'Build-$(Agent.OS)_$(psEdition)'
      targetPath: '$(Build.Repository.LocalPath)'