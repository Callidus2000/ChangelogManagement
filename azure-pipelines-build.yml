parameters:
  name: ''
  vmImage: ''
  moduleInstallOptions: ''
  pwsh: true
  tempDir: ''

jobs:
- job: ${{ parameters.name }}
  pool: 
    vmImage: ${{ parameters.vmImage }}
  steps:

  - task: PowerShell@2
    displayName: Environment Details
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $PSVersionTable
        Write-Host "Build.Repository.Uri = $env:BUILD_REPOSITORY_URI"
        Write-Host "Build.QueuedBy = $env:BUILD_QUEUEDBY"
        Write-Host "Build.SourceVersionMessage = $env:BUILD_SOURCEVERSIONMESSAGE"
        Write-Host "Build.Repository.Name = $env:BUILD_REPOSITORY_NAME"
        Write-Host "Build.BuildNumber = $env:BUILD_BUILDNUMBER"

  - task: PowerShell@2
    displayName: Install-Module
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: Install-Module -Name $env:POWERSHELLMODULES.split(",") -Force -SkipPublisherCheck -AllowClobber ${{ parameters.moduleInstallOptions }}

  - task: PowerShell@2
    displayName: Set Variables
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $ProjectNameLocal = $env:BUILD_REPOSITORY_NAME.split("/")[1]
        Write-Host "##vso[task.setvariable variable=projectName]$ProjectNameLocal"
        Write-Host "`$env:PROJECTNAME set to $env:PROJECTNAME"
        $NextVerLocal = Get-NextNugetPackageVersion -Name $env:PROJECTNAME
        Write-Host "##vso[task.setvariable variable=nextVer]$NextVerLocal"
        Write-Host "`$env:NEXTVER set to $env:NEXTVER"

  - task: PowerShell@2
    displayName: Invoke-Build
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        if ($env:BUILD_SOURCEVERSIONMESSAGE -like "!Deploy*") {$env:RELEASEVERSION = $env:BUILD_SOURCEVERSIONMESSAGE.split(" ")[1]}
        if ($env:BUILD_SOURCEVERSIONMESSAGE -notlike "!Deploy*") {
          Write-Host "`$env:NEXTVER is $env:NEXTVER"
          Write-Host "`$env:BUILD_BUILDNUMBER is $env:BUILD_BUILDNUMBER"
          $env:RELEASEVERSION = $env:NEXTVER.ToString() + "-alpha" + $env:BUILD_BUILDNUMBER
        }
        Invoke-Build -Version $env:RELEASEVERSION -LinkPattern (Invoke-Expression $env:LINKPATTERN)

  - task: PowerShell@2
    displayName: Prepare Artifacts
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: |
        $env:RELEASEPACKAGEFILE = "out\$env:PROJECTNAME-v$env:RELEASEVERSION.zip"
        Compress-Archive -Path ".\*" -DestinationPath "${{ parameters.tempDir }}\state.zip"
        Move-Item -Path "${{ parameters.tempDir }}\state.zip" -Destination "out\"
        Compress-Archive -Path "out\$env:PROJECTNAME" -DestinationPath $env:RELEASEPACKAGEFILE

  - task: PublishPipelineArtifact@0
    displayName: Publish BuildState
    inputs:
      artifactName: 'BuildState'
      targetPath: 'out/state.zip'

  - task: PublishPipelineArtifact@0
    displayName: Publish ReleasePackage
    inputs:
      artifactName: 'ReleasePackage'
      targetPath: $(ReleasePackageFile)

  - task: PowerShell@2
    displayName: Invoke-Pester
    inputs:
      pwsh: ${{ parameters.pwsh }}
      targetType: inline
      script: Invoke-Pester